{"ast":null,"code":"var _class;\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000'; //  backend API URL\n  }\n\n  getPosts() {\n    return this.http.get(`${this.apiUrl}/movies`).pipe(catchError(error => {\n      if (error.status === 401) {\n        // Handle 401 Unauthorized error\n        console.error('Unauthorized:', error);\n        // You can redirect to the login page or show a message to the user\n      } else {\n        // Handle other errors\n        console.error('An error occurred:', error);\n      }\n      return throwError(error);\n    }));\n  }\n  registerUser(userData) {\n    return this.http.post(`${this.apiUrl}/register`, userData).pipe(catchError(error => {\n      console.error('Observable error:', error);\n      throw error;\n    }));\n  }\n  login(credentials) {\n    const url = `${this.apiUrl}/login`;\n    return this.http.post(url, credentials);\n  }\n}\n_class = ApiService;\n_class.ɵfac = function ApiService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","throwError","ApiService","constructor","http","apiUrl","getPosts","get","pipe","error","status","console","registerUser","userData","post","login","credentials","url","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\GIT\\FinalProject2\\Frontend\\src\\app\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  private apiUrl = 'http://localhost:3000'; //  backend API URL\n\n  constructor(private http: HttpClient) {}\n\n  getPosts() {\n    return this.http.get(`${this.apiUrl}/movies`)\n      .pipe(\n        catchError((error: HttpErrorResponse) => {\n          if (error.status === 401) {\n            // Handle 401 Unauthorized error\n            console.error('Unauthorized:', error);\n            // You can redirect to the login page or show a message to the user\n          } else {\n            // Handle other errors\n            console.error('An error occurred:', error);\n          }\n          return throwError(error);\n        })\n      );\n  }\n  \n  registerUser(userData: any) {\n    return this.http.post(`${this.apiUrl}/register`, userData).pipe(\n      catchError(error => {\n        console.error('Observable error:', error);\n        throw error;\n      })\n    )\n  }\n  login(credentials: { email: string; password: string }): Observable<any> {\n    const url = `${this.apiUrl}/login`;\n    return this.http.post(url, credentials);\n  }\n\n}\n"],"mappings":";AAEA,SAASA,UAAU,QAAQ,gBAAgB;AAC3C,SAAqBC,UAAU,QAAQ,MAAM;;;AAK7C,OAAM,MAAOC,UAAU;EAIrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,uBAAuB,CAAC,CAAC;EAEH;;EAEvCC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,GAAG,IAAI,CAACF,MAAM,SAAS,CAAC,CAC1CG,IAAI,CACHR,UAAU,CAAES,KAAwB,IAAI;MACtC,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxB;QACAC,OAAO,CAACF,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;QACrC;OACD,MAAM;QACL;QACAE,OAAO,CAACF,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;;MAE5C,OAAOR,UAAU,CAACQ,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACL;EAEAG,YAAYA,CAACC,QAAa;IACxB,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAC,GAAG,IAAI,CAACT,MAAM,WAAW,EAAEQ,QAAQ,CAAC,CAACL,IAAI,CAC7DR,UAAU,CAACS,KAAK,IAAG;MACjBE,OAAO,CAACF,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzC,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;EACAM,KAAKA,CAACC,WAAgD;IACpD,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACZ,MAAM,QAAQ;IAClC,OAAO,IAAI,CAACD,IAAI,CAACU,IAAI,CAACG,GAAG,EAAED,WAAW,CAAC;EACzC;;SAlCWd,UAAU;;mBAAVA,MAAU,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAVnB,MAAU;EAAAoB,OAAA,EAAVpB,MAAU,CAAAqB,IAAA;EAAAC,UAAA,EAFT;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}