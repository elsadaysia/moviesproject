{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000'; //  backend API URL\n  }\n  // getToken(): string | null {\n  //   // Implement the logic to retrieve the JWT token here.\n  //   // This could involve accessing a stored token in local storage, a cookie, or wherever your token is stored.\n  //   // Return the token if available, or null if not authenticated.\n  //   // For example, if your token is stored in localStorage:\n  //   return localStorage.getItem('jwtToken');\n  //   // console.log(localStorage)\n  // }\n  // Store the token in localStorage\n  setToken(token) {\n    localStorage.setItem('accessToken', token);\n  }\n  // Get the token from localStorage\n  getToken() {\n    return localStorage.getItem('accessToken');\n  }\n  getPosts() {\n    return this.http.get(`${this.apiUrl}/movies`).pipe(catchError(error => {\n      if (error.status === 401) {\n        // Handle 401 Unauthorized error\n        console.error('Unauthorized:', error);\n        // You can redirect to the login page or show a message to the user\n      } else {\n        // Handle other errors\n        console.error('An error occurred:', error);\n      }\n      return throwError(error);\n    }));\n  }\n  registerUser(userData) {\n    return this.http.post(`${this.apiUrl}/register`, userData).pipe(catchError(error => {\n      console.error('Observable error:', error);\n      throw error;\n    }));\n  }\n  login(credentials) {\n    const url = `${this.apiUrl}/login`;\n    return this.http.post(url, credentials).pipe(catchError(error => {\n      // Handle error here (e.g., log it, show a message to the user)\n      console.error('Login failed:', error);\n      throw error; // Rethrow the error to propagate it to the subscriber\n    }));\n  }\n\n  addMovie(movieData) {\n    return this.http.post(`${this.apiUrl}/addmovie`, movieData);\n  }\n  bookmarkMovie(movieId, token) {\n    const headers = new HttpHeaders().set('token', token);\n    return this.http.post(`${this.apiUrl}/bookmark/${movieId}`, {}, {\n      headers\n    });\n  }\n}\n_class = ApiService;\n_class.ɵfac = function ApiService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","catchError","throwError","ApiService","constructor","http","apiUrl","setToken","token","localStorage","setItem","getToken","getItem","getPosts","get","pipe","error","status","console","registerUser","userData","post","login","credentials","url","addMovie","movieData","bookmarkMovie","movieId","headers","set","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\GIT\\FinalProject2\\Frontend\\src\\app\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient,HttpHeaders } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  private apiUrl = 'http://localhost:3000'; //  backend API URL\n\n  constructor(private http: HttpClient,) {}\n\n  // getToken(): string | null {\n  //   // Implement the logic to retrieve the JWT token here.\n  //   // This could involve accessing a stored token in local storage, a cookie, or wherever your token is stored.\n  //   // Return the token if available, or null if not authenticated.\n  //   // For example, if your token is stored in localStorage:\n  //   return localStorage.getItem('jwtToken');\n  //   // console.log(localStorage)\n  // }\n// Store the token in localStorage\nsetToken(token: string): void {\n  localStorage.setItem('accessToken', token);\n}\n\n// Get the token from localStorage\ngetToken(): string | null {\n  return localStorage.getItem('accessToken');\n}\n\n  getPosts() {\n    return this.http.get(`${this.apiUrl}/movies`)\n      .pipe(\n        catchError((error: HttpErrorResponse) => {\n          if (error.status === 401) {\n            // Handle 401 Unauthorized error\n            console.error('Unauthorized:', error);\n            // You can redirect to the login page or show a message to the user\n          } else {\n            // Handle other errors\n            console.error('An error occurred:', error);\n          }\n          return throwError(error);\n        })\n      );\n  }\n  \n  registerUser(userData: any) {\n    return this.http.post(`${this.apiUrl}/register`, userData).pipe(\n      catchError(error => {\n        console.error('Observable error:', error);\n        throw error;\n      })\n    )\n  }\n  login(credentials: { email: string; password: string }): Observable<any> {\n    const url = `${this.apiUrl}/login`;\n    return this.http.post(url, credentials).pipe(\n      catchError((error: HttpErrorResponse) => {\n        // Handle error here (e.g., log it, show a message to the user)\n        console.error('Login failed:', error);\n        throw error; // Rethrow the error to propagate it to the subscriber\n      })\n    );\n  }\n  \n\n  addMovie(movieData: any) {\n    return this.http.post(`${this.apiUrl}/addmovie`, movieData);\n  }\n\n  bookmarkMovie(movieId: string, token: string): Observable<any> {\n    const headers = new HttpHeaders().set('token', token);\n    return this.http.post<any>(\n      `${this.apiUrl}/bookmark/${movieId}`,\n      {},\n      { headers }\n    );\n  }\n}\n"],"mappings":";AACA,SAAoBA,WAAW,QAAQ,sBAAsB;AAC7D,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAAqBC,UAAU,QAAQ,MAAM;;;AAO7C,OAAM,MAAOC,UAAU;EAIrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,uBAAuB,CAAC,CAAC;EAEF;EAExC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACF;EACAC,QAAQA,CAACC,KAAa;IACpBC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEF,KAAK,CAAC;EAC5C;EAEA;EACAG,QAAQA,CAAA;IACN,OAAOF,YAAY,CAACG,OAAO,CAAC,aAAa,CAAC;EAC5C;EAEEC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAC,GAAG,IAAI,CAACR,MAAM,SAAS,CAAC,CAC1CS,IAAI,CACHd,UAAU,CAAEe,KAAwB,IAAI;MACtC,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxB;QACAC,OAAO,CAACF,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;QACrC;OACD,MAAM;QACL;QACAE,OAAO,CAACF,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;;MAE5C,OAAOd,UAAU,CAACc,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACL;EAEAG,YAAYA,CAACC,QAAa;IACxB,OAAO,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAC,GAAG,IAAI,CAACf,MAAM,WAAW,EAAEc,QAAQ,CAAC,CAACL,IAAI,CAC7Dd,UAAU,CAACe,KAAK,IAAG;MACjBE,OAAO,CAACF,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzC,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;EACAM,KAAKA,CAACC,WAAgD;IACpD,MAAMC,GAAG,GAAG,GAAG,IAAI,CAAClB,MAAM,QAAQ;IAClC,OAAO,IAAI,CAACD,IAAI,CAACgB,IAAI,CAACG,GAAG,EAAED,WAAW,CAAC,CAACR,IAAI,CAC1Cd,UAAU,CAAEe,KAAwB,IAAI;MACtC;MACAE,OAAO,CAACF,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC,MAAMA,KAAK,CAAC,CAAC;IACf,CAAC,CAAC,CACH;EACH;;EAGAS,QAAQA,CAACC,SAAc;IACrB,OAAO,IAAI,CAACrB,IAAI,CAACgB,IAAI,CAAC,GAAG,IAAI,CAACf,MAAM,WAAW,EAAEoB,SAAS,CAAC;EAC7D;EAEAC,aAAaA,CAACC,OAAe,EAAEpB,KAAa;IAC1C,MAAMqB,OAAO,GAAG,IAAI7B,WAAW,EAAE,CAAC8B,GAAG,CAAC,OAAO,EAAEtB,KAAK,CAAC;IACrD,OAAO,IAAI,CAACH,IAAI,CAACgB,IAAI,CACnB,GAAG,IAAI,CAACf,MAAM,aAAasB,OAAO,EAAE,EACpC,EAAE,EACF;MAAEC;IAAO,CAAE,CACZ;EACH;;SAxEW1B,UAAU;;mBAAVA,MAAU,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAV/B,MAAU;EAAAgC,OAAA,EAAVhC,MAAU,CAAAiC,IAAA;EAAAC,UAAA,EAFT;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}