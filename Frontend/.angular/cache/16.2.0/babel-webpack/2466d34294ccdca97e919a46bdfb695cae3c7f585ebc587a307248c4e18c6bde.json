{"ast":null,"code":"var _class;\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000'; //  backend API URL\n  }\n\n  getPosts() {\n    return this.http.get(`${this.apiUrl}/movies`);\n  }\n  registerUser(userData) {\n    return this.http.post(`${this.apiUrl}/register`, userData).pipe(catchError(error => {\n      console.error('Observable error:', error);\n      throw error;\n    }));\n  }\n  submit() {\n    const emailValue = this.form.get('email')?.value;\n    const passwordValue = this.form.get('password')?.value;\n    this.apiService.login({\n      email: emailValue,\n      password: passwordValue\n    }).subscribe(response => {\n      // Extract and store the JWT token here\n      const accessToken = response.accessToken;\n      // Store the token securely (e.g., in local storage)\n      localStorage.setItem('accessToken', accessToken);\n      // Redirect to the desired route (e.g., '/movies')\n      this.router.navigate(['/movies']);\n    }, error => {\n      // Handle login errors here\n      alert('Login failed'); // Display a general error message\n      // You can also customize the error message based on the error response\n      // For example, if (error.status === 401), show \"Invalid email or password\"\n    });\n  }\n}\n_class = ApiService;\n_class.ɵfac = function ApiService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","ApiService","constructor","http","apiUrl","getPosts","get","registerUser","userData","post","pipe","error","console","submit","emailValue","form","value","passwordValue","apiService","login","email","password","subscribe","response","accessToken","localStorage","setItem","router","navigate","alert","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\GIT\\FinalProject2\\Frontend\\src\\app\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  private apiUrl = 'http://localhost:3000'; //  backend API URL\n\n  constructor(private http: HttpClient) {}\n\n  getPosts(){\n    return this.http.get(`${this.apiUrl}/movies`);\n  }\n  registerUser(userData: any) {\n    return this.http.post(`${this.apiUrl}/register`, userData).pipe(\n      catchError(error => {\n        console.error('Observable error:', error);\n        throw error;\n      })\n    )\n  }\n  submit() {\n    const emailValue = this.form.get('email')?.value;\n    const passwordValue = this.form.get('password')?.value;\n  \n    this.apiService.login({ email: emailValue, password: passwordValue }).subscribe(\n      (response) => {\n        // Extract and store the JWT token here\n        const accessToken = response.accessToken;\n  \n        // Store the token securely (e.g., in local storage)\n        localStorage.setItem('accessToken', accessToken);\n  \n        // Redirect to the desired route (e.g., '/movies')\n        this.router.navigate(['/movies']);\n      },\n      (error) => {\n        // Handle login errors here\n        alert('Login failed'); // Display a general error message\n        // You can also customize the error message based on the error response\n        // For example, if (error.status === 401), show \"Invalid email or password\"\n      }\n    );\n  }\n  \n\n}\n"],"mappings":";AAEA,SAASA,UAAU,QAAQ,gBAAgB;;;AAM3C,OAAM,MAAOC,UAAU;EAIrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,uBAAuB,CAAC,CAAC;EAEH;;EAEvCC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,GAAG,IAAI,CAACF,MAAM,SAAS,CAAC;EAC/C;EACAG,YAAYA,CAACC,QAAa;IACxB,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACL,MAAM,WAAW,EAAEI,QAAQ,CAAC,CAACE,IAAI,CAC7DV,UAAU,CAACW,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzC,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;EACAE,MAAMA,CAAA;IACJ,MAAMC,UAAU,GAAG,IAAI,CAACC,IAAI,CAACT,GAAG,CAAC,OAAO,CAAC,EAAEU,KAAK;IAChD,MAAMC,aAAa,GAAG,IAAI,CAACF,IAAI,CAACT,GAAG,CAAC,UAAU,CAAC,EAAEU,KAAK;IAEtD,IAAI,CAACE,UAAU,CAACC,KAAK,CAAC;MAAEC,KAAK,EAAEN,UAAU;MAAEO,QAAQ,EAAEJ;IAAa,CAAE,CAAC,CAACK,SAAS,CAC5EC,QAAQ,IAAI;MACX;MACA,MAAMC,WAAW,GAAGD,QAAQ,CAACC,WAAW;MAExC;MACAC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEF,WAAW,CAAC;MAEhD;MACA,IAAI,CAACG,MAAM,CAACC,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC,EACAjB,KAAK,IAAI;MACR;MACAkB,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;MACvB;MACA;IACF,CAAC,CACF;EACH;;SAvCW5B,UAAU;;mBAAVA,MAAU,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAVhC,MAAU;EAAAiC,OAAA,EAAVjC,MAAU,CAAAkC,IAAA;EAAAC,UAAA,EAFT;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}