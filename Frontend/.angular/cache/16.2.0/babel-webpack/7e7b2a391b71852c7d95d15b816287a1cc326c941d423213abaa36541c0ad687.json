{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let MovieListComponent = class MovieListComponent {\n  constructor(movieService, authService // Inject your authentication service\n  ) {\n    this.movieService = movieService;\n    this.authService = authService;\n    this.movies = [];\n  }\n  ngOnInit() {\n    // After a successful login, the authentication service should store the JWT token.\n    // You can access it from there.\n    const userToken = this.authService.getToken(); // Replace with the actual method in your AuthService\n    if (!userToken) {\n      // Handle the case where the token is not available (e.g., user is not logged in)\n      console.error('User is not authenticated.');\n      return;\n    }\n    // Use the retrieved token to fetch movies\n    this.movieService.getMovies(userToken).subscribe(data => {\n      this.movies = data;\n    });\n  }\n};\nMovieListComponent = __decorate([Component({\n  selector: 'app-movie-list',\n  templateUrl: './movie-list.component.html',\n  styleUrls: ['./movie-list.component.css']\n})], MovieListComponent);","map":{"version":3,"names":["Component","MovieListComponent","constructor","movieService","authService","movies","ngOnInit","userToken","getToken","console","error","getMovies","subscribe","data","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\GIT\\FinalProject2\\Frontend\\src\\app\\movies\\movies.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { MovieService } from './movie.service';\nimport { AuthService } from './auth.service'; // Import your authentication service\n\n@Component({\n  selector: 'app-movie-list',\n  templateUrl: './movie-list.component.html',\n  styleUrls: ['./movie-list.component.css']\n})\nexport class MovieListComponent implements OnInit {\n  movies: any[] = [];\n\n  constructor(\n    private movieService: MovieService,\n    private authService: AuthService // Inject your authentication service\n  ) { }\n\n  ngOnInit() {\n    // After a successful login, the authentication service should store the JWT token.\n    // You can access it from there.\n    const userToken = this.authService.getToken(); // Replace with the actual method in your AuthService\n\n    if (!userToken) {\n      // Handle the case where the token is not available (e.g., user is not logged in)\n      console.error('User is not authenticated.');\n      return;\n    }\n\n    // Use the retrieved token to fetch movies\n    this.movieService.getMovies(userToken).subscribe(data => {\n      this.movies = data;\n    });\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAS1C,WAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAG7BC,YACUC,YAA0B,EAC1BC,WAAwB,CAAC;EAAA,E;IADzB,KAAAD,YAAY,GAAZA,YAAY;IACZ,KAAAC,WAAW,GAAXA,WAAW;IAJrB,KAAAC,MAAM,GAAU,EAAE;EAKd;EAEJC,QAAQA,CAAA;IACN;IACA;IACA,MAAMC,SAAS,GAAG,IAAI,CAACH,WAAW,CAACI,QAAQ,EAAE,CAAC,CAAC;IAE/C,IAAI,CAACD,SAAS,EAAE;MACd;MACAE,OAAO,CAACC,KAAK,CAAC,4BAA4B,CAAC;MAC3C;;IAGF;IACA,IAAI,CAACP,YAAY,CAACQ,SAAS,CAACJ,SAAS,CAAC,CAACK,SAAS,CAACC,IAAI,IAAG;MACtD,IAAI,CAACR,MAAM,GAAGQ,IAAI;IACpB,CAAC,CAAC;EACJ;CACD;AAxBYZ,kBAAkB,GAAAa,UAAA,EAL9Bd,SAAS,CAAC;EACTe,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE,6BAA6B;EAC1CC,SAAS,EAAE,CAAC,4BAA4B;CACzC,CAAC,C,EACWhB,kBAAkB,CAwB9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}