{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nexport class AuthInterceptor {\n  intercept(request, next) {\n    const accessToken = localStorage.getItem('accessToken');\n    if (accessToken) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      });\n    }\n    return next.handle(request);\n  }\n}\n_class = AuthInterceptor;\n_class.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});","map":{"version":3,"names":["AuthInterceptor","intercept","request","next","accessToken","localStorage","getItem","clone","setHeaders","Authorization","handle","factory","ɵfac"],"sources":["D:\\GIT\\FinalProject2\\Frontend\\src\\interceptors\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    const accessToken = localStorage.getItem('accessToken');\r\n\r\n    if (accessToken) {\r\n      request = request.clone({\r\n        setHeaders: {\r\n          Authorization: `Bearer ${accessToken}`,\r\n        },\r\n      });\r\n    }\r\n\r\n    return next.handle(request);\r\n  }\r\n}\r\n"],"mappings":";;AAUA,OAAM,MAAOA,eAAe;EAC1BC,SAASA,CAACC,OAAyB,EAAEC,IAAiB;IACpD,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IAEvD,IAAIF,WAAW,EAAE;MACfF,OAAO,GAAGA,OAAO,CAACK,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUL,WAAW;;OAEvC,CAAC;;IAGJ,OAAOD,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC;EAC7B;;SAbWF,eAAe;;mBAAfA,MAAe;AAAA;;SAAfA,MAAe;EAAAW,OAAA,EAAfX,MAAe,CAAAY;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}