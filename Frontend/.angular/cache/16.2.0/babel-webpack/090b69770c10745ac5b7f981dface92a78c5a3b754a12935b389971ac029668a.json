{"ast":null,"code":"var _class;\nimport { catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000'; //  backend API URL\n  }\n\n  getToken() {\n    // Implement the logic to retrieve the JWT token here.\n    // This could involve accessing a stored token in local storage, a cookie, or wherever your token is stored.\n    // Return the token if available, or null if not authenticated.\n    // For example, if your token is stored in localStorage:\n    return localStorage.getItem('jwtToken');\n    getPosts();\n    {\n      return this.http.get(`${this.apiUrl}/movies`).pipe(catchError(error => {\n        if (error.status === 401) {\n          // Handle 401 Unauthorized error\n          console.error('Unauthorized:', error);\n          // You can redirect to the login page or show a message to the user\n        } else {\n          // Handle other errors\n          console.error('An error occurred:', error);\n        }\n        return throwError(error);\n      }));\n    }\n    registerUser(userData, any);\n    {\n      return this.http.post(`${this.apiUrl}/register`, userData).pipe(catchError(error => {\n        console.error('Observable error:', error);\n        throw error;\n      }));\n    }\n    login(credentials, {\n      email: string,\n      password: string\n    });\n    Observable < any > {\n      const: url = `${this.apiUrl}/login`,\n      return: this.http.post(url, credentials)\n    };\n  }\n}\n_class = ApiService;\n_class.ɵfac = function ApiService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["catchError","Observable","throwError","ApiService","constructor","http","apiUrl","getToken","localStorage","getItem","getPosts","get","pipe","error","status","console","registerUser","userData","any","post","login","credentials","email","string","password","const","url","return","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\GIT\\FinalProject2\\Frontend\\src\\app\\api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  private apiUrl = 'http://localhost:3000'; //  backend API URL\n\n  constructor(private http: HttpClient) {}\n\n  getToken(): string | null {\n    // Implement the logic to retrieve the JWT token here.\n    // This could involve accessing a stored token in local storage, a cookie, or wherever your token is stored.\n    // Return the token if available, or null if not authenticated.\n    // For example, if your token is stored in localStorage:\n    return localStorage.getItem('jwtToken');\n  getPosts() {\n    return this.http.get(`${this.apiUrl}/movies`)\n      .pipe(\n        catchError((error: HttpErrorResponse) => {\n          if (error.status === 401) {\n            // Handle 401 Unauthorized error\n            console.error('Unauthorized:', error);\n            // You can redirect to the login page or show a message to the user\n          } else {\n            // Handle other errors\n            console.error('An error occurred:', error);\n          }\n          return throwError(error);\n        })\n      );\n  }\n  \n  registerUser(userData: any) {\n    return this.http.post(`${this.apiUrl}/register`, userData).pipe(\n      catchError(error => {\n        console.error('Observable error:', error);\n        throw error;\n      })\n    )\n  }\n  login(credentials: { email: string; password: string }): Observable<any> {\n    const url = `${this.apiUrl}/login`;\n    return this.http.post(url, credentials);\n  }\n\n}\n"],"mappings":";AAEA,SAASA,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;AAO7C,OAAM,MAAOC,UAAU;EAIrBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,uBAAuB,CAAC,CAAC;EAEH;;EAEvCC,QAAQA,CAAA;IACN;IACA;IACA;IACA;IACA,OAAOC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACzCC,QAAQ,EAAE;IAAC;MACT,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAC,GAAG,IAAI,CAACL,MAAM,SAAS,CAAC,CAC1CM,IAAI,CACHZ,UAAU,CAAEa,KAAwB,IAAI;QACtC,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;UACxB;UACAC,OAAO,CAACF,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;UACrC;SACD,MAAM;UACL;UACAE,OAAO,CAACF,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;;QAE5C,OAAOX,UAAU,CAACW,KAAK,CAAC;MAC1B,CAAC,CAAC,CACH;;IAGLG,YAAY,CAACC,QAAQ,EAAEC,GAAG,CAAC;IAAC;MAC1B,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAC,GAAG,IAAI,CAACb,MAAM,WAAW,EAAEW,QAAQ,CAAC,CAACL,IAAI,CAC7DZ,UAAU,CAACa,KAAK,IAAG;QACjBE,OAAO,CAACF,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;QACzC,MAAMA,KAAK;MACb,CAAC,CAAC,CACH;;IAEHO,KAAK,CAACC,WAAW,EAAE;MAAEC,KAAK,EAAEC,MAAM;MAAEC,QAAQ,EAAED;IAAM,CAAE,CAAC;IAAEtB,UAAU,GAACiB,GAAG,GAAE;MACvEO,KAAK,EAACC,GAAG,GAAG,GAAG,IAAI,CAACpB,MAAM,QAAQ;MAClCqB,MAAM,EAAC,IAAI,CAACtB,IAAI,CAACc,IAAI,CAACO,GAAG,EAAEL,WAAW;KACvC;EAEH;;SA1CalB,UAAU;;mBAAVA,MAAU,EAAAyB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAV5B,MAAU;EAAA6B,OAAA,EAAV7B,MAAU,CAAA8B,IAAA;EAAAC,UAAA,EAFT;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}